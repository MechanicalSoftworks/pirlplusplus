/*	PIRL++

PIRL CVS ID: $Id: Overview.doxygen,v 1.13 2010/10/19 01:30:54 castalia Exp $

Copyright (C) 2010  Arizona Board of Regents 
on behalf of the Planetary Image Research Laboratory, 
Lunar and Planetary Laboratory at the University of Arizona.

This library is free software; you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License, version 2.1,
as published by the Free Software Foundation.

This library is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this library; if not, write to the Free Software Foundation,
Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
*/

/*!	\mainpage

The PIRL++ library contains C++ classes designed to enable
capabilities used in support of a wide range of applications.

<h3>PIRL::Binary_IO</h3>

The Binary_IO class provides input and output of binary data values. The
data may optionally be reversed to handle byte ordering differences
between the host system that writes the binary data and the host system
that reads it.

<h3>PIRL::Cache</h3>

The Cache provides a dynamic input storage area that can be bound to an
input stream which will be used for automatic data refills to get user
data as needed. User data may also be put into the Cache which will
inflate as needed. In addition to the conventional managed buffer
operation, a Cache may have a data margin that specifies the minimum
amount of data to be retained when the user space is drained. This
mechanism is employed when a function is supplied to test for a logical
end-of-data condition in the input stream.

<h3>PIRL::Data_Block</h3>

A Data_Block manages access to a block of binary data bytes with a user
defined data structure. The data may be in non-native order, in which
case data transfers between the data block and application variables
will reverse the byte order. The memory holding the binary block of data
is managed by the user, not the Data_Block. The same block of data may
be shared by more than one Data_Block object to provide different
"views" of the data structure. The Data_Block is not a substitute for a
struct; it offers special capabilities: byte order independence, byte
alignment independence, dynamic structure definition, multiple data
views, and data memory independence.

<h3>endian</h3>

A set of functions, and function templates, for testing and manipulating
data byte ordering.

<h3>Files</h3>

A set of convenience functions for manipulating file pathnames. Access
to the host system name is also provided.

<h3>Dimensions</h3>
Lightweight classes for managing common dimension objects including
{@link PIRL::Point_2D points}, {@link PIRL::Size_2D sizes}, {@link
PIRL::Rectangle rectangles} and {@link PIRL::Cube cubes}.

<h3>PIRL::Reference_Counted_Pointer</h3>

Associates a pointer with a reference counter for shared use of pointer
referenced objects on the heap. Multiple Reference_Counted_Pointers using
the same reference can be destroyed with the referenced object only being
deleted when all shared references to the object have been destroyed.


These classes were developed at the Planetary Image Research Laborary,
Department of Planetary Science, University of Arizona, Tucson,
Arizona.

The PIRL++ source code is availabale from the
<A HREF="http://pirlwww.lpl.arizona.edu/software/registration/registration.cgi?software=PIRLpp">
%PIRL software distribution site</A>.

<hr>
Copyright (C) 2010  Arizona Board of Regents on behalf of the Planetary
Image Research Laboratory, Lunar and Planetary Laboratory at the
University of Arizona.

This library is free software; you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License, version 2.1,
as published by the Free Software Foundation.

This library is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this library; if not, write to the Free Software Foundation,
Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
*/
